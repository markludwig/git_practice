Codeacademy - Learn Git

*********************************
* Lesson 1 - Basic Git Workflow *
*********************************

A Git project has three parts:

1) A Working Directory: where files are created, edited, deleted, and organized
2) A Staging Area: where changes that are made to the working directory are listed
3) A Repository: where Git permanently stores changes as different versions of the project


Initializing a Git Repository
-----------------------------
cd /Users/mark/GitHub/ProjectFolder
git init


Adding Changes to the Staging Area
----------------------------------
git add filename.txt

- Show additions
git status


Displaying Differences with Git Diff
------------------------------------
git diff hello.txt


Committing Your Code
--------------------
git commit -m "Log message here"

- Must be in quotation marks
- Written in the present tense
- Should be brief (50 characters or less) when using -m


Showing Git Commit Logs
-----------------------
git log


*************************
* Set Up Git and GitHub *
*************************

1) Make a new directory to practice.

	mkdir git_practice

2) Make the new directory your working directory.

	cd git_practice

3) Turn the current, empty directory into a fresh Git repository.

	git init

4) Create a new README file (more on this later) with some sample text.

	echo "Hello Git and GitHub" >> README.txt

5) Add the new file to the Git staging area.

	git add README.txt

6) Make your first commit with the new README file.

	git commit -m "First commit"

7) Login to GitHub

8) Create a repository

	Click on the "New repository" button

9) Connect to the remote repository from the command line

	git remote add origin https:// (Link from the GitHub page)

10) Push the commited changes to the remote repository

	git push -u origin master


*******************************
* Lesson 2 - How to Backtrack *
*******************************

Showing Latest Commit Log
-------------------------
git show HEAD


Staging Multiple Files
----------------------
git add filename_1 filename_2

- All files
git add .


Remove File from Staging
------------------------
git reset HEAD filename


Rolling Back to Last Commit
---------------------------
Revert the working file to the last committed version

git checkout HEAD filename

- Check if successful (this should report nothing)
git diff


Git Reset Using SHA
-------------------
In this example, the HEAD was reset to the commit made on Wed Jan 6.
Use the first seven digits of a previous commitâ€™s SHA.

git log

	commit 9d63f80111447544c303e9f1776fa08593a87310
	Date: Jan 13 HH:MI:SS YYYY

	commit 3ba6efbeece6ed530d85de5e313e52123fdf8cb4
	Date: Jan 6 HH:MI:SS YYYY

	git reset 3ba6efb


*****************************
* Lesson 3 -  Git Branching *
*****************************

Check Current Branch
--------------------
git branch


Create a New Branch
-------------------
git branch new_branch_name


Switch to the New Branch
------------------------
git checkout new_branch_namels


Merge Branch into Master
------------------------
git merge branch_name


Handling Merge Conflicts
------------------------
Review the markings in the file

	<<<<<<< HEAD
	master version of line
	=======
	fencing version of line
	>>>>>>> fencing

From the code editor, choose which verson to keep. Delete
any of Git's markings (> =)


Delete Branch
-------------
git branch -d branch_name

